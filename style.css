html, body {
  margin: 0;
}

.top{
    height:10%;
    width: 260px;
    display: flex;
    flex-direction: row;
    align-items: center;
    padding-top: 20px;
    gap: 20px;
}

input{
    color:#8464ad;
    height: 100%;
    margin-bottom: 0px;
    border-radius: 20px;
    padding-left: 15px;
    border:1px solid #bc5eae79;
    box-sizing: border-box;
    width:70%;
}
input:hover{
    border:2px solid #a4e3e6;
    color:#9db6b8;
}

button{
    color:#8464ad;
    background-color: #e1d4f1;
    background-image: none;
    font-family:'Arial Narrow Bold', sans-serif;
    font-weight: bold;
    border-radius: 20px;
    height: 40px;
    width: 100px;
    position: relative; /*necessary for button:after as reference*/
    display:flex;
    justify-content: center;
    align-items: center;
    border:1px solid #bc5eae79;;
}

.butHigh{
    height:100%;
}
.butLow{
    width: 60%;
}

button:after{ /*pseudo element > insert content/styling after creation of button*/
    content:''; /* :after or :before won't appear if content property is not set*/
    position: absolute; /*always oriented fixed to closest ancestor with position:relative attribute*/
    width:110%;
    height:120%;
    border-radius: 20px;
    z-index: -1;
    background-image: linear-gradient(to bottom right, #b487f0,  #e9b877) ; /* (direction, first color, second color)*/
}

button:hover{
    color:#fbf7ff;
    z-index: 1;
}

.majorCocktailName{
    font-size: x-large;
    font-family:'Segoe UI';
    padding-bottom: 20px;
    margin:0;
    color:#fbf7ff;
    text-align: center;
}

.main{
    height:100vh;
    width: 100vw;

    display:flex;
    align-items: center;
    flex-direction: column;
  
    background-image: url(uglyblurred.jpg);
    background-repeat: no-repeat;
    background-size: 100vw 100vh;
    
    padding-top: 35px;
    box-sizing: border-box;
}

.card{
    height:80vh;
    min-height: 350px;
    border-radius: 20px;
    display:flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-justify: center;
    
    box-sizing: border-box;
    padding: 15px;
    background-color: rgba(255, 255, 255, 0.623);
}

.container{
    height:65%;
    background-image: linear-gradient(to bottom right, #b487f0,  #a4e3e6) ; 
    border-radius: 15px;
    width:260px;
    display:flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-justify: center;

    box-sizing: border-box;
    padding:20px;
    padding-top: 5px;
    margin:15px;
}

#glass{
    height:75%;
    width: 230px;
    border: 5px solid #ffffff;
    display: flex;
    flex-direction: column-reverse;
    border-radius: 60px;
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
    background-color: #edf8f8;
    overflow:hidden;
}

.DivIngr{ 
    display:flex;
    height:100%;
    color:rgba(86, 0, 80, 0.58);
    justify-content: center;
    align-items: center;
    text-justify: center;
    font-size: 14px;
    font-family: 'Segoe UI';
    font-weight: bold;

    transition: flex 0.3s; /*how long for flex property to change*/
    flex: 0 0 100%;
    /*flex-grow: 0;     flex-shrink: 0;     flex-basis: 0%; (starting size)*/
}

.DivMeas{
    display:flex;
    height:100%;
    color:rgba(86, 0, 80, 0.58);
    justify-content: center;
    align-items: center;
    text-justify: center;

    transition: flex 0.3s;
    flex: 0 0 0%;

}

.DivContain{
width: 100%;
height: 200px;
display: flex;
flex-direction: row;
overflow:hidden;
}

.DivContain:hover .DivIngr, /*when hover over this class apply to child*/
.DivContain:hover .DivMeas {
    flex: 1 0 50%; /*new basis is now 50% of DivContain*/
}

/*
    FLEX PROPERTY
    0 1 auto	Shrinks when space is tight
    1 0 100%	Takes full space, but can grow (good for responsive layout)
    0 0 0%	Invisible and fixed size
    
    flex:1 = Let all the flexible items be the same length, regardless of its content:
    flex-grow = A number specifying how much the item will grow relative to the rest of the flexible items
    flex-shrink:2 = half the value of the other items
    
    flex-grow: How much a flex item can grow relative to others.
    flex-shrink: How much it can shrink when there's not enough space.
    flex-basis: The default size before growing or shrinking happens.
    
    example:
    .one   { flex: 1 1 200px; }  /* grow:1, shrink:1, basis:200px 
    .two   { flex: 2 1 200px; }  /* grow:2, shrink:1, basis:200px 
    .three { flex: 1 1 200px; }  /* grow:1, shrink:1, basis:200px 
    
    Each starts with 200px (flex-basis) (container 600px)
    if container change to 900px > .two gets 2x the extra space compared to .one and .three. 450px while others are 250px 
    
    */ 